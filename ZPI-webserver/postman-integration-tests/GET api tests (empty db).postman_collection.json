{
	"info": {
		"_postman_id": "8c1e14b8-d1f6-4ca9-ade9-3155a80a21a8",
		"name": "GET api tests (empty db)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19053221"
	},
	"item": [
		{
			"name": "GET empty maps test",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an array\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response is empty\", function () {\r",
							"  var jsonData = pm.response.json();\r",
							"  pm.expect(jsonData.length).to.eq(0)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/api/maps",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"api",
						"maps"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET nonexistent map",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request should fail with a status code of 404 (not found)\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an error message\", function () {\r",
							"  var errStr = pm.response;\r",
							"  pm.expect(errStr).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response is correct err message\", function () {\r",
							"  var errStr = pm.response;\r",
							"  pm.expect(errStr).to.eq(\"There is no map with id 42334!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/api/map/42334",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"api",
						"map",
						"42334"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET top scores with nonexistent map",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request should fail with a status code of 404 (not found)\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an error message\", function () {\r",
							"  var errStr = pm.response;\r",
							"  pm.expect(errStr).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response is correct err message\", function () {\r",
							"  var errStr = pm.response;\r",
							"  pm.expect(errStr).to.eq(\"There is no map with id 6547!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/api/scores/6547",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"api",
						"scores",
						"6547"
					]
				}
			},
			"response": []
		},
		{
			"name": "GET score of nonexisting user and nonexising map",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request should fail with a status code of 404 (not found)\", function () {\r",
							"  pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that it returns an error message\", function () {\r",
							"  var errStr = pm.response;\r",
							"  pm.expect(errStr).to.be.a(\"string\");\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response is correct err message\", function () {\r",
							"  var errStr = pm.response;\r",
							"  pm.expect(errStr).to.eq(\"There is no user with id 321!\")\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:5000/api/user/321/score/786",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "5000",
					"path": [
						"api",
						"user",
						"321",
						"score",
						"786"
					]
				}
			},
			"response": []
		}
	]
}