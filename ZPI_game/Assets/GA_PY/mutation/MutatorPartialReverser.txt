<color=#dc0073>from</color> random <color=#dc0073>import</color> randrange
<color=#dc0073>from</color> copy <color=#dc0073>import</color> deepcopy
<color=#dc0073>from</color> Circuit <color=#dc0073>import</color> Circuit


<color=#f5b700>class</color> <color=#dc0073>MutatorPartialReverser</color>:

    <color=#ffa704>@staticmethod</color>
    <color=#f5b700>def</color> <color=#7b3fca>mutate</color>(city_ids: <color=#dc0073>list</color>[<color=#dc0073>int</color>], start_index: <color=#dc0073>int</color>, end_index: <color=#dc0073>int</color>) -> <color=#dc0073>list</color>[<color=#dc0073>int</color>]:
        city_ids_copy = deepcopy(city_ids)  
        length = end_index - start_index + <color=#ffffff>1</color> \
            <color=#f5b700>if</color> end_index < start_index \
            <color=#f5b700>else</color> (end_index - start_index + <color=#ffffff>1</color> + <color=#dc0073>len</color>(city_ids_copy)) % <color=#dc0073>len</color>(city_ids_copy)
        <color=#f5b700>for</color> i in <color=#dc0073>range</color>(length // <color=#ffffff>2</color>):
            index1 = (start_index + i) % <color=#dc0073>len</color>(city_ids_copy)  
            index2 = (end_index - i + <color=#dc0073>len</color>(city_ids_copy)) % <color=#dc0073>len</color>(city_ids_copy)  
            city_ids_copy[index1], city_ids_copy[index2] = \
                city_ids_copy[index2], city_ids_copy[index1]  
        <color=#f5b700>return</color> city_ids_copy

    <color=#f5b700>def</color> <color=#7b3fca>get</color>(<color=#01befe>self</color>, city_ids: <color=#dc0073>list</color>[<color=#dc0073>int</color>]) -> <color=#dc0073>list</color>[<color=#dc0073>int</color>]:
        start_index = randrange(<color=#ffffff>0</color>, <color=#dc0073>len</color>(city_ids))  
        end_index = randrange(<color=#ffffff>0</color>, <color=#dc0073>len</color>(city_ids))
        <color=#f5b700>return</color> <color=#01befe>self</color>.mutate(city_ids, start_index, end_index)
