<color=#aaf502><link="class">class</link></color> <color=#009607>GeneticAlgorithm</color>:

    <color=#aaf502><link="def">def</link></color> __init__(<color=#188600><link="self">self</link></color>, weights_grid: DistancesGrid, generation_size: <color=#006e05><link="int">int</link></color>, selector,
                 mutator, mut_prob: <color=#006e05><link="float">float</link></color>,
                 crosser, cross_prob: <color=#006e05><link="float">float</link></color>):

        <color=#188600><link="self">self</link></color>.weights_grid = weights_grid
        <color=#188600><link="self">self</link></color>.selector = selector
        <color=#188600><link="self">self</link></color>.mutator =                  
        <color=#188600><link="self">self</link></color>.mut_prob =                  
        <color=#188600><link="self">self</link></color>.crosser = crosser
        <color=#188600><link="self">self</link></color>.cross_prob = cross_prob

        <color=#188600><link="self">self</link></color>.generation = [<link="Circuit">Circuit</link>.get_random(
            weights_grid) <color=#aaf502><link="for">for</link></color> _ in <color=#006e05><link="range">range</link></color>(generation_size)]
        <color=#188600><link="self">self</link></color>.best = <link="Circuit">Circuit</link>.get_best(<color=#188600><link="self">self</link></color>.generation)
        <color=#188600><link="self">self</link></color>.best_for_iter = <color=#188600><link="self">self</link></color>.best
        <color=#188600><link="self">self</link></color>.iteration = <color=#89b68b>0</color>

