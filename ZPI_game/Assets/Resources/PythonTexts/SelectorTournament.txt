<color=#aaf502><link="class">class</link></color> <color=#009607>SelectorTournament</color>:

    <color=#aaf502><link="def">def</link></color> __init__(<color=#188600><link="self">self</link></color>, size_percentage: <color=#006e05><link="float">float</link></color>):
        <color=#188600><link="self">self</link></color>.size_percentage = size_percentage

    <color=#aaf502><link="def">def</link></color> <color=#3e9360>get</color>(<color=#188600><link="self">self</link></color>, generation: <color=#006e05><link="list">list</link></color>[<link="Circuit">Circuit</link>]) -> <link="Circuit">               </link>:  
        tournament_size = <color=#006e05><link="int">int</link></color>(<color=#006e05><link="len">len</link></color>(generation) * <color=#188600><link="self">self</link></color>.size_percentage)
        selected_indexes = random.               (  
            <color=#006e05><link="range">               </link></color>(<color=#006e05><link="len">len</link></color>(generation)), tournament_size  
        )
        selected = [generation[i] <color=#aaf502><link="for">               </link></color> i in selected_               dexes]  
        <color=#aaf502><link="return">return</link></color> <color=#006e05><link="min">               </link></color>(selected, key=<color=#aaf502><link="lambda">lambda</link></color> x: x.score)  
