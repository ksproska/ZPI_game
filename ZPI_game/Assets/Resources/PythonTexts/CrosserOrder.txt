<color=#006e05><link="import">import</link></color> random


<color=#aaf502><link="class">class</link></color> <color=#006e05>CrosserOrder</color>:
    <color=#9fff00><link="@staticmethod">@staticmethod</link></color>
    <color=#aaf502><link="def">def</link></color> <color=#7b3fca>cross</color>(parent1: <color=#006e05><link="list">list</link></color>, parent2: <color=#006e05><link="list">list</link></color>, start_index: <color=#006e05><link="int">int</link></color>, segment_length: <color=#006e05><link="int">int</link></color>):
        child = [None <color=#aaf502><link="for">for</link></color> _ in <color=#006e05><link="range">range</link></color>(<color=#006e05><link="len">len</link></color>(parent1))]
        <color=#aaf502><link="for">for</link></color> i in <color=#006e05><link="range">range</link></color>(segment_length):
            index = i + start_index
            child[index] = parent1[index]

        last_not_contained = <color=#89b68b>0</color>
        <color=#aaf502><link="for">for</link></color> i in <color=#006e05><link="range">range</link></color>(<color=#006e05><link="len">len</link></color>(child)):
            <color=#aaf502><link="if">if</link></color> child[i] is None:
                last_not_contained = CrosserOrder.__put_next(child, parent2, i, last_not_contained)
        <color=#aaf502><link="return">return</link></color> child

    <color=#9fff00><link="@staticmethod">@staticmethod</link></color>
    <color=#aaf502><link="def">def</link></color> <color=#7b3fca>__put_next</color>(child: <color=#006e05><link="list">list</link></color>, parent2: <color=#006e05><link="list">list</link></color>, curr_i: <color=#006e05><link="int">int</link></color>, last_not_contained: <color=#006e05><link="int">int</link></color>):
        <color=#aaf502><link="for">for</link></color> j in <color=#006e05><link="range">range</link></color>(last_not_contained, <color=#006e05><link="len">len</link></color>(parent2)):
            <color=#aaf502><link="if">if</link></color> parent2[j] not in child:
                child[curr_i] = parent2[j]
                <color=#aaf502><link="return">return</link></color> j + <color=#89b68b>1</color>
        <color=#aaf502><link="return">return</link></color> <color=#006e05><link="len">len</link></color>(parent2)

    <color=#aaf502><link="def">def</link></color> <color=#7b3fca>get</color>(<color=#188600><link="self">self</link></color>, parent1: <color=#006e05><link="list">list</link></color>, parent2: <color=#006e05><link="list">list</link></color>):
        startInx = random.randrange(<color=#006e05><link="len">len</link></color>(parent1))
        segmentLen = random.randrange(<color=#006e05><link="max">max</link></color>(<color=#006e05><link="len">len</link></color>(parent1) - startInx - <color=#89b68b>1</color>, <color=#89b68b>1</color>))

        <color=#aaf502><link="return">return</link></color> <color=#188600><link="self">self</link></color>.cross(parent1, parent2, startInx, segmentLen)
