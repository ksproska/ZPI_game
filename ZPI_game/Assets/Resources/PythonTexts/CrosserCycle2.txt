    <color=#9fff00><link="@staticmethod">@staticmethod</link></color>
    <color=#aaf502><link="def">def</link></color> <color=#3e9360>__copy_from_parents</color>(cycles, parent1, parent2):
        child = [                <color=#aaf502><link="for">for</link></color> _ in <color=#006e05><link="range">range</link></color>(<color=#006e05><link="len">len</link></color>(parent1))]  
        <color=#aaf502><link="for">for</link></color> i, cycle in <color=#006e05><link="enumerate">               </link></color>(cycles):  
            <color=#aaf502><link="for">for</link></color> index in cycle:
                <color=#aaf502><link="if">if</link></color> i                 <color=#89b68b>2</color>                 <color=#89b68b>0</color>:  
                    child[index] =                [index]  
                <color=#aaf502><link="else">else</link></color>:
                    child[index] =                [index]  
        <color=#aaf502><link="return">return</link></color> child

    <color=#9fff00><link="@staticmethod">@staticmethod</link></color>
    <color=#aaf502><link="def">def</link></color> <color=#3e9360>cross</color>(parent1: <color=#006e05><link="list">list</link></color>, parent2: <color=#006e05><link="list">list</link></color>):
        cycles = CrosserCycle.               (parent1, parent2)  
        child = CrosserCycle.__copy_from_parents(               , parent1, parent2)  
        <color=#aaf502><link="return">return</link></color> child

    <color=#aaf502><link="def">def</link></color> <color=#3e9360>get</color>(<color=#188600><link="self">self</link></color>, parent1: <color=#006e05><link="list">list</link></color>, parent2: <color=#006e05><link="list">list</link></color>):
        <color=#aaf502><link="return">return</link></color> <color=#188600><link="self">self</link></color>.cross(parent1, parent2)
