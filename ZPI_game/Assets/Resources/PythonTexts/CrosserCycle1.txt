<color=#aaf502><link="class">class</link></color> <color=#009607>CrosserCycle</color>:
    <color=#aaf502><link="def">def</link></color> <color=#3e9360>__get_cycles</color>(parent1, parent2):
        cycles: <color=#006e05><link="list">list</link></color>[<color=#006e05><link="list">list</link></color>[<color=#006e05><link="int">int</link></color>]] = []
        current_inx = <color=#89b68b>               </color>  
        collected_indexes = {current_inx}
        <color=#aaf502><link="while">while</link></color> <color=#006e05><link="len">len</link></color>(collected_indexes)                 <color=#006e05><link="len">len</link></color>(parent1):  
            cycle_beginning: <color=#006e05><link="int">int</link></color> =                [current_inx]  
            current_cycle: <color=#006e05><link="list">list</link></color>[<color=#006e05><link="int">int</link></color>] = [               ]  

            <color=#aaf502><link="while">while</link></color> True:
                next_inx = parent1.index(parent2[current_cycle[-<color=#89b68b>1</color>]])  
                current_cycle.               (next_inx)  
                collected_indexes.               (next_inx)  

                <color=#aaf502><link="if">if</link></color> parent1[               [-<color=#89b68b>1</color>]] == cycle_beginning:  
                    current_cycle.               ()  
                    <color=#aaf502><link="break">break</link></color>
            cycles.append(current_cycle)

            <color=#aaf502><link="while">while</link></color> current_inx in collected_indexes:
                                += <color=#89b68b>1</color>  
        <color=#aaf502><link="return">return</link></color> cycles

