<color=#006e05>import</color> random


<color=#aaf502>class</color> <color=#006e05>CrosserPartialyMatched</color>:

    <color=#9fff00>@staticmethod</color>
    <color=#aaf502>def</color> <color=#7b3fca>cross</color>(parent1: <color=#006e05>list</color>, parent2: <color=#006e05>list</color>, start_index: <color=#006e05>int</color>, segment_length: <color=#006e05>int</color>):
        <color=#648068>"""
        Method returns a child for given parents, start index, and length of a segment.
        """</color>
        child = [None <color=#aaf502>for</color> _ in <color=#006e05>range</color>(<color=#006e05>len</color>(parent1))]  
        <color=#aaf502>for</color> i in <color=#006e05>range</color>(start_index, segment_length):
            child[i] = parent1[i]  

        <color=#aaf502>for</color> i in <color=#006e05>range</color>(segment_length):
            index = i + start_index
            value = parent2[index]  

            <color=#aaf502>if</color> value not in child:  
                <color=#aaf502>while</color> child[index] is not None:
                    index = parent2.index(parent1[index])  
                child[index] = value

        <color=#aaf502>for</color> i in <color=#006e05>range</color>(<color=#006e05>len</color>(child)):
            <color=#aaf502>if</color> child[i] is None:
                child[i] = parent2[i]

        <color=#aaf502>return</color> child

    <color=#aaf502>def</color> <color=#7b3fca>get</color>(<color=#188600>self</color>, parent1: <color=#006e05>list</color>, parent2: <color=#006e05>list</color>):
        <color=#648068>"""
        Method returns a child for given parents. Start index and length of a segment are drawnded.
        """</color>
        start_inx = random.randrange(<color=#006e05>len</color>(parent1) - <color=#89b68b>1</color>)  
        segment_len = random.randrange(<color=#006e05>len</color>(parent1) - start_inx - <color=#89b68b>1</color>)
        <color=#aaf502>return</color> <color=#188600>self</color>.cross(parent1, parent2, start_inx, segment_len)  
