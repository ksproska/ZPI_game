<color=#006e05>import</color> random
<color=#006e05>from</color> Circuit <color=#006e05>import</color> Circuit


<color=#aaf502>class</color> <color=#009607>SelectorTournament</color>:

    <color=#aaf502>def</color> __init__(<color=#188600>self</color>, size_percentage: <color=#006e05>float</color>):
        <color=#78997c>"""Init for Tournament Selector
        ---------------------------------------------------------
        Args:
            size_percentage (float): the percentage of generation that will participate in tournament
        ---------------------------------------------------------
        Example:
            generation_size = 50
            and
            size_percentage = 0.44 (44%)
            then:
            numb_participating = 22
        """</color>
        <color=#188600>self</color>.size_percentage = size_percentage

    <color=#aaf502>def</color> <color=#3e9360>get</color>(<color=#188600>self</color>, generation: <color=#006e05>list</color>[Circuit]) -> Circuit:  
        <color=#78997c>"""Returns one Circuit object that is the winner of tournament selection.
        It randomly chooses the participants (of size = len(generation) * self.size_percentage)
        and returns the best one.
        ---------------------------------------------------------
        Args:
            generation (list[Circuit]): list of all Circuit objects in this generation

        Returns:
            Circuit: the winner of the selection
        """</color>
        tournament_size = <color=#006e05>int</color>(<color=#006e05>len</color>(generation) * <color=#188600>self</color>.size_percentage)
        selected_idxs = random.sample(  
            <color=#006e05>range</color>(<color=#006e05>len</color>(generation)), tournament_size  
        )
        selected = [generation[i] <color=#aaf502>for</color> i in selected_idxs]  
        <color=#aaf502>return</color> <color=#006e05>min</color>(selected, key=<color=#aaf502>lambda</color> x: x.score)  
