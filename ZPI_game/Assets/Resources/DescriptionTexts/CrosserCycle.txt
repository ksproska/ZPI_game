<color=#aaf502>class</color> <color=#009607>CrosserCycle</color>:
    <color=#9fff00>@staticmethod</color>
    <color=#aaf502>def</color> <color=#3e9360>__get_cycles</color>(parent1: <color=#006e05>list</color>[<color=#006e05>int</color>], parent2: <color=#006e05>list</color>[<color=#006e05>int</color>]) -> <color=#006e05>list</color>[<color=#006e05>list</color>[<color=#006e05>int</color>]]:
        <color=#78997c>"""Method returns list of all cycles found in parents.
        ---------------------------------------------------------
        Example:
        parent1 = [8, 4, 7, 3, 6, 2, 5, 1, 9, 0]
        parent2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

        cycles: [
                    [0, 9, 8], 
                    [1, 7, 2, 5, 6, 4], 
                    [3]
                ]

        ---------------------------------------------------------
        Args:
            parent1 (list[int]): genotype of the first parent
            parent2 (list[int]): genotype of the second parent

        Returns:
            list[list[int]]: all found cycles
        """</color>
        cycles: <color=#006e05>list</color>[<color=#006e05>list</color>[<color=#006e05>int</color>]] = []
        current_inx = <color=#89b68b>0</color>  
        collected_indexes = {current_inx}
        <color=#aaf502>while</color> <color=#006e05>len</color>(collected_indexes) != <color=#006e05>len</color>(parent1):  
            cycle_beginning: <color=#006e05>int</color> = parent1[current_inx]  
            current_cycle: <color=#006e05>list</color>[<color=#006e05>int</color>] = [current_inx]  

            <color=#aaf502>while</color> True:
                next_inx = parent1.index(parent2[current_cycle[-<color=#89b68b>1</color>]])  
                current_cycle.append(next_inx)  
                collected_indexes.add(next_inx)  

                <color=#aaf502>if</color> parent1[current_cycle[-<color=#89b68b>1</color>]] == cycle_beginning:  
                    current_cycle.pop()  
                    <color=#aaf502>break</color>
            cycles.append(current_cycle)

            <color=#aaf502>while</color> current_inx in collected_indexes:
                current_inx += <color=#89b68b>1</color>  
        <color=#aaf502>return</color> cycles

    <color=#9fff00>@staticmethod</color>
    <color=#aaf502>def</color> <color=#3e9360>__copy_from_parents</color>(cycles: <color=#006e05>list</color>[<color=#006e05>list</color>[<color=#006e05>int</color>]],
                            parent1: <color=#006e05>list</color>[<color=#006e05>int</color>], parent2: <color=#006e05>list</color>[<color=#006e05>int</color>]) -> <color=#006e05>list</color>[<color=#006e05>int</color>]:
        <color=#78997c>"""Method copies values for the correct parent.
        ---------------------------------------------------------
        Args:
            cycles (list[list[int]]): all cycles found for parents
            parent1 (list[int]): genotype of the first parent
            parent2 (list[int]): genotype of the second parent

        Returns:
            list[int]: genotype of the child

        ---------------------------------------------------------
        Example:
        cycles = [
            [0, 9, 8], 
            [1, 7, 2, 5, 6, 4], 
            [3]
        ]
        parent1 = [8, 4, 7, 3, 6, 2, 5, 1, 9, 0]
        parent2 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

        child:    [8, 1, 2, 3, 4, 5, 6, 7, 9, 0] 
        """</color>
        child = [None <color=#aaf502>for</color> _ in <color=#006e05>range</color>(<color=#006e05>len</color>(parent1))]  
        <color=#aaf502>for</color> i, cycle in <color=#006e05>enumerate</color>(cycles):  
            <color=#aaf502>for</color> index in cycle:
                <color=#aaf502>if</color> i % <color=#89b68b>2</color> == <color=#89b68b>0</color>:  
                    child[index] = parent1[index]  
                <color=#aaf502>else</color>:
                    child[index] = parent2[index]  
        <color=#aaf502>return</color> child

    <color=#aaf502>def</color> <color=#3e9360>get</color>(<color=#188600>self</color>, parent1: <color=#006e05>list</color>[<color=#006e05>int</color>], parent2: <color=#006e05>list</color>[<color=#006e05>int</color>]) -> <color=#006e05>list</color>[<color=#006e05>int</color>]:
        <color=#78997c>"""Returns genotype of the parents' child
        ---------------------------------------------------------
        Args:
            parent1 (list[int]): genotype of the first parent
            parent2 (list[int]): genotype of the second parent

        Returns:
            list[int]: genotype of the child
        """</color>
        cycles = CrosserCycle.__get_cycles(parent1, parent2)  
        child = CrosserCycle.__copy_from_parents(cycles, parent1, parent2)  
        <color=#aaf502>return</color> child
