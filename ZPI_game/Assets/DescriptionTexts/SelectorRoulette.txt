<color=#006e05>import</color> random

<color=#006e05>from</color> Circuit <color=#006e05>import</color> Circuit


<color=#aaf502>class</color> <color=#006e05>SelectorRoulette</color>:

    <color=#9fff00>@staticmethod</color>
    <color=#aaf502>def</color> <color=#7b3fca>get_distributed_weight</color>(generation: <color=#006e05>list</color>[Circuit]) -> <color=#006e05>list</color>:
        max_score = <color=#006e05>max</color>(generation, key=<color=#aaf502>lambda</color> x: x.score)
        reversed_eval = [max_score.score - x.score + <color=#89b68b>1</color> <color=#aaf502>for</color> x in generation]
        sum_eval = <color=#006e05>sum</color>(reversed_eval)
        eval_percentage = [x / sum_eval <color=#aaf502>for</color> x in reversed_eval]

        <color=#aaf502>for</color> i in <color=#006e05>range</color>(<color=#006e05>len</color>(eval_percentage) - <color=#89b68b>1</color>):
            eval_percentage[i + <color=#89b68b>1</color>] += eval_percentage[i]

        <color=#aaf502>return</color> eval_percentage

    <color=#9fff00>@staticmethod</color>
    <color=#aaf502>def</color> <color=#7b3fca>get_index_for_value</color>(distributed_weights, value):
        <color=#aaf502>for</color> i in <color=#006e05>range</color>(<color=#006e05>len</color>(distributed_weights)):
            <color=#aaf502>if</color> value <= distributed_weights[i]:
                <color=#aaf502>return</color> i

    <color=#aaf502>def</color> <color=#7b3fca>get</color>(<color=#188600>self</color>, generation):
        rand_float = random.random()
        distributed_weights = <color=#188600>self</color>.get_distributed_weight(generation)
        index = <color=#188600>self</color>.get_index_for_value(distributed_weights, rand_float)
        <color=#aaf502>return</color> generation[index]
