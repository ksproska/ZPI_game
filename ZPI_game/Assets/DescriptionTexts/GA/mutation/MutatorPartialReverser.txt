<color=#a44fff>from</color> random <color=#a44fff>import</color> randrange
<color=#a44fff>from</color> copy <color=#a44fff>import</color> deepcopy
<color=#a44fff>from</color> Individual <color=#a44fff>import</color> Individual


<color=#a44fff>class</color> MutatorPartialReverser:

    <color=#ffa704>@staticmethod</color>
    <color=#a44fff>def</color> <color=#ffa704>mutate</color>(genotype: <color=#ff6600>list</color>[Individual], start_indx: <color=#ff6600>int</color>, end_indx: <color=#ff6600>int</color>) -> <color=#ff6600>list</color>[Individual]:
        genotype_copy = deepcopy(genotype)
        length = end_indx - start_indx + <color=#66c2ff>1</color> <color=#a44fff>if</color> end_indx < start_indx <color=#a44fff>else</color> (end_indx - start_indx + <color=#66c2ff>1</color> + <color=#ff6600>len</color>(
            genotype_copy)) % <color=#ff6600>len</color>(genotype_copy)
        <color=#a44fff>for</color> i in <color=#ff6600>range</color>(length // <color=#66c2ff>2</color>):
            indx1 = (start_indx + i) % <color=#ff6600>len</color>(genotype_copy)
            indx2 = (end_indx - i + <color=#ff6600>len</color>(genotype_copy)) % <color=#ff6600>len</color>(genotype_copy)
            genotype_copy[indx1], genotype_copy[indx2] = genotype_copy[indx2], genotype_copy[indx1]
        <color=#a44fff>return</color> genotype_copy

    <color=#a44fff>def</color> <color=#ffa704>get</color>(<color=#66c2ff>self</color>, genotype: <color=#ff6600>list</color>[Individual]) -> <color=#ff6600>list</color>[Individual]:
        start_indx = randrange(<color=#66c2ff>0</color>, <color=#ff6600>len</color>(genotype))
        end_indx = randrange(<color=#66c2ff>0</color>, <color=#ff6600>len</color>(genotype))
        <color=#a44fff>return</color> MutatorPartialReverser.mutate(genotype, start_indx, end_indx)
